Int : TYPE
x : ID
; : SEMI
Int : TYPE
y : ID
= : ASSIGN
x : ID
; : SEMI
Int : TYPE
inc : ID
( : LPAREN
Int : TYPE
x : ID
) : RPAREN
{ : LBRACE
x : ID
+ : PLUS
1 : INT
} : RBRACE
; : SEMI
x : ID
= : ASSIGN
inc : ID
( : LPAREN
y : ID
) : RPAREN
; : SEMI
print_float : ID
( : LPAREN
mult : ID
( : LPAREN
x : ID
, : COMMA
y : ID
) : RPAREN
) : RPAREN
; : SEMI
Float : TYPE
mult : ID
( : LPAREN
Float : TYPE
x : ID
, : COMMA
Float : TYPE
y : ID
) : RPAREN
{ : LBRACE
x : ID
+ : PLUS
y : ID
* : MULT
2.5 : FLOAT
} : RBRACE
; : SEMI
Bool : TYPE
b : ID
= : ASSIGN
x : ID
== : EQUAL
x : ID
; : SEMI
print_bool : ID
( : LPAREN
b : ID
) : RPAREN
; : SEMI
x : ID
= : ASSIGN
if : IF
b : ID
then : THEN
5 : INT
else : ELSE
7 : INT
fi : FI
; : SEMI
print_int : ID
( : LPAREN
x : ID
) : RPAREN
; : SEMI
Int : TYPE
factorial : ID
( : LPAREN
Int : TYPE
n : ID
) : RPAREN
{ : LBRACE
Int : TYPE
p : ID
= : ASSIGN
1 : INT
; : SEMI
Int : TYPE
i : ID
; : SEMI
for : FOR
i : ID
= : ASSIGN
1 : INT
, : COMMA
i : ID
<= : LE
n : ID
, : COMMA
i : ID
= : ASSIGN
i : ID
+ : PLUS
1 : INT
do : DO
{ : LBRACE
p : ID
= : ASSIGN
p : ID
* : MULT
i : ID
; : SEMI
print_int : ID
( : LPAREN
p : ID
) : RPAREN
; : SEMI
} : RBRACE
; : SEMI
p : ID
; : SEMI
} : RBRACE
; : SEMI
print_int : ID
( : LPAREN
factorial : ID
( : LPAREN
5 : INT
) : RPAREN
) : RPAREN
; : SEMI
<EOF> : EOF
