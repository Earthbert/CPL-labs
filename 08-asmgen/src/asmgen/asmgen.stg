sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(data, textFuncs, textMain) ::= <<
.data
<data>

.text
<textFuncs>

main:
<textMain>
	li $v0 10
	syscall		# exit
>>

literal(value) ::= <<
	li $a0 <value>
>>

fliteral(value) ::= <<
	li.s $f0 <value>
	mfc1 $a0 $f0
>>

uMinus(e) ::= <<
<e>
	not $a0 $a0
>>

binaryOp(e1, e2, op, dStr) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	<op> $a0 $t1 $a0
	addiu $sp $sp 4		<if(dStr)># <dStr><else><endif>
>>

fbinaryOp(e1, e2, op, dStr, c1, c2) ::= <<
<e1>
	sw $a0 0($sp)
	addiu $sp $sp -4
<e2>
	lw $t1 4($sp)
	mtc1 $t1 $f0
<if(c1)>cvt.s.w $f0 $f0<endif>
	mtc1 $a0 $f1
<if(c2)>cvt.s.w $f1 $f1<endif>
	<op> $f0 $f0 $f1
	mfc1 $a0 $f0
	addiu $sp $sp 4		<if(dStr)># <dStr><else><endif>
>>

iff(cond, thenBranch, elseBranch, idx) ::= <<
<cond>
    beq $a0 $zero else_<idx>
then_<idx>:
<thenBranch>
    b end_if_<idx>
else_<idx>:
<elseBranch>
end_if_<idx>:
>>

param(p) ::= <<
<p>
	sw $a0 0($sp)
	addiu $sp $sp -4
>>

call(name, params) ::= <<
<sequence(params : param())>
	jal <name>
>>

syscall_print_int(expr) ::= <<
<expr>
	li $v0 1
	syscall
	la $a0 newline
	li $v0 4
	syscall
>>

syscall_print_float(expr) ::= <<
<expr>
	mtc1 $a0 $f12
	li $v0 2
	syscall
	la $a0 newline
	li $v0 4
	syscall
>>

syscall_read_int() ::= <<
	li $v0 5
	syscall
	move $a0 $v0
>>

syscall_read_float() ::= <<
	li $v0 6
	syscall
	mfc1 $a0 $f0
>>

syscall_exit() ::= <<
	li $v0 10
	syscall
>>

print_bool(expr, i) ::= <<
<expr>
	li $v0 4
	la $a0 true
	beq $a0 $zero print_bool_false_<i>
	j print_bool_end_<i>
print_bool_false_<i>:
	la $a0 false
print_bool_end_<i>:
	syscall
	la $a0 newline
	li $v0 4
	syscall
>>